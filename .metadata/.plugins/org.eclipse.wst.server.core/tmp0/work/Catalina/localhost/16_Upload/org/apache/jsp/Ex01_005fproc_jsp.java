/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-15 03:27:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;

public final class Ex01_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Ex01_proc.jsp<br>\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String name = request.getParameter("name");
	String filename = request.getParameter("filename");
	System.out.println("<Ex01_proc.jsp> name : " + name + ", filename : " + filename);
	//null : why)enctype 속성으로 파일 하나라도 넘기면 모든 값이 다 null
	
	String configFolder = "";
	int maxSize = 1024 * 1024 * 5;
	String saveFolder = "img";
	String encoding = "UTF-8";
	
	/* ServletContext application = new ServletContext(); */
	String applicationFolder = application.getRealPath("");
	System.out.println("<Ex01_proc.jsp> applicationFolder : " + applicationFolder);
	/* <Ex01_proc.jsp> applicationFolder : C:\JSP_ywl\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\16_Upload\  : 웹서버폴더 */
	
	/* ServletConfig config = new ServletConfig(); */
	ServletContext sc = config.getServletContext();
	configFolder = sc.getRealPath("");
	System.out.println("<Ex01_proc.jsp> configFolder : " + configFolder);
	/* <Ex01_proc.jsp> configFolder : C:\JSP_ywl\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\16_Upload\ */

	/* applicationFolder = configFolder */
	
	configFolder = config.getServletContext().getRealPath("img");
	System.out.println("<Ex01_proc.jsp> configFolder : " + configFolder);
	/* <Ex01_proc.jsp> configFolder : C:\JSP_ywl\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\16_Upload\img */

	String requestFolder = request.getContextPath() + "/" +  saveFolder;
	System.out.println("<Ex01_proc.jsp> requestFolder : " + requestFolder);
	/* <Ex01_proc.jsp> requestFolder : /16_Upload/img : 현재 작업중인 프로젝트명 출력(실제로는 configFolder 경로가 앞에 숨어있음) */

	MultipartRequest multi;
	multi = new MultipartRequest(request, configFolder, maxSize, encoding, new DefaultFileRenamePolicy()); // configFolder 경로로 파일 업로드
	/* 
	request : 넘어오는 form의 정보(이름, 파일이름)
	configFolder : 긴 경로(이미지 올릴 경로) //applicationFolder도 가능 //requestFolder는 안됨
	maxSize : 파일 크기(5메가 이상은 에러)
	encoding : 넘어오는 값을 한글처리
	new DefaultFileRenamePolicy() : 뒤에 숫자 추가해서 똑같은 이미지도 여러번 올릴 수 있도록 함(안쓰면 안 올라감)
	*/
	
	Enumeration files = multi.getFileNames();
	String file = (String)files.nextElement();
	System.out.println("<Ex01_proc.jsp> file : " + file); // name = "filename"인 곳의 값을 가져옴
	/* <Ex01_proc.jsp> file : filename */
	String fname = multi.getFilesystemName(file); //filename에 담은 file이름
	System.out.println("<Ex01_proc.jsp> fname : " + fname); 
	/* <Ex01_proc.jsp> fname : Austrailia4.jpg */
	String orgname = multi.getOriginalFileName(file);
	System.out.println("<Ex01_proc.jsp> orgname : " + orgname); 
	/* <Ex01_proc.jsp> orgname : Austrailia.jpg */
	
	String fullPath1 = configFolder + "\\" + orgname;
	System.out.println("<Ex01_proc.jsp> fullPath1 : " + fullPath1); 
	/* <Ex01_proc.jsp> fullPath1 : C:\JSP_ywl\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\16_Upload\img\Austrailia.jpg */
	
	String fullPath2 = requestFolder + "\\" + orgname;
	System.out.println("<Ex01_proc.jsp> fullPath2 : " + fullPath2); 
	/* <Ex01_proc.jsp> fullPath2 : /16_Upload/img\Austrailia.jpg */


      out.write("\r\n");
      out.write("\r\n");
      out.write("이름 : ");
      out.print( multi.getParameter("name") );
      out.write("<br><br>\r\n");
      out.write("\r\n");
      out.write("<img src=\"");
      out.print( fullPath1 );
      out.write("\" width=\"500\" height=\"200\"/> <br><br>\r\n");
      out.write("<img src=\"");
      out.print( fullPath2 );
      out.write("\" width=\"500\" height=\"200\"/> <br><br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("내장객체\r\n");
      out.write("out\r\n");
      out.write("session\r\n");
      out.write("request : 요청할 때마다 객체 만들어짐\r\n");
      out.write("response\r\n");
      out.write("config : jsp 실행하면 내부적으로 java로 바뀜\r\n");
      out.write("jsp 페이지가 서블릿으로 변환되서 서블릿 객체(인스턴스)가 생성될 때 참고해야 되는 초기 설정 정보를 저장해놓는 객체\r\n");
      out.write("서블릿 당 하나가 만들어짐\r\n");
      out.write("application : 프로젝트 당 하나 만들어짐 \r\n");
      out.write("-->\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
