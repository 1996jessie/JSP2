/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-07 23:38:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import myPkg.BookBean;
import java.util.*;

public final class select_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("myPkg.BookBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("select.jsp<br>\r\n");
      out.write("\r\n");
      myPkg.BookDao bdao = null;
      bdao = (myPkg.BookDao) _jspx_page_context.getAttribute("bdao", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (bdao == null){
        bdao = new myPkg.BookDao();
        _jspx_page_context.setAttribute("bdao", bdao, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	table {\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		margin: auto;\r\n");
      out.write("		border: 1px;\r\n");
      out.write("		width: 800px;\r\n");
      out.write("	}\r\n");
      out.write("	tr:first-child{\r\n");
      out.write("		background-color : yellow;\r\n");
      out.write("	}\r\n");
      out.write("	td,th{\r\n");
      out.write("		border: 1px solid black;\r\n");
      out.write("		padding: 3px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function insert() {		\r\n");
      out.write("		location.href = \"insertForm.jsp\";\r\n");
      out.write("	}\r\n");
      out.write("	function allDelete(obj){ //obj = this = allcheck인 체크박스\r\n");
      out.write("		//alert('1');\r\n");
      out.write("		\r\n");
      out.write("		var rcheck = document.getElementsByName(\"rowcheck\");\r\n");
      out.write("		//alert(rcheck.length);\r\n");
      out.write("		var check = obj.checked; //체크하면 true, 아니면 false\r\n");
      out.write("		//alert(check);\r\n");
      out.write(" 		if(check){ // 체크상태(true)\r\n");
      out.write("			for(var i=0;i<rcheck.length;i++) {\r\n");
      out.write("				rcheck[i].checked = true; //모든 rowcheck 체크상태로\r\n");
      out.write("			}\r\n");
      out.write("		} else {\r\n");
      out.write("			for(var i=0;i<rcheck.length;i++) {\r\n");
      out.write("				rcheck[i].checked = false; //모든 rowcheck 해제상태로\r\n");
      out.write("			}			\r\n");
      out.write("		} 	\r\n");
      out.write("	}//allDelete\r\n");
      out.write("	\r\n");
      out.write("/*  function delete() { //예약어는 함수 이름으로 쓸 수 없음(for, else 등등)\r\n");
      out.write("		alert('1');\r\n");
      out.write("	}  */\r\n");
      out.write("\r\n");
      out.write("	function selectDelete(){\r\n");
      out.write("		//alert('1');\r\n");
      out.write("		var rcheck = document.getElementsByName(\"rowcheck\");\r\n");
      out.write("		var flag = false;\r\n");
      out.write("		for(var i=0;i<rcheck.length;i++) {\r\n");
      out.write("			if(rcheck[i].checked) {\r\n");
      out.write("				flag = true;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		if(!flag) { //= !false = true\r\n");
      out.write("			alert('삭제할 항목을 선택하세요');\r\n");
      out.write("			return; //선택하지 않으면 그 자리에 머물러 있도록 설정\r\n");
      out.write("		} \r\n");
      out.write("\r\n");
      out.write("		document.myform.submit(); //submit 버튼을 누른 것처럼 행동하라는 함수 //action으로 이동해라\r\n");
      out.write("	}//selectDelete\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<form name = \"myform\" action = \"deleteAll.jsp\">\r\n");
      out.write("	\r\n");
      out.write("	<input type = \"button\" value = \"삭제\" onClick = \"selectDelete()\">\r\n");
      out.write("	<input type = \"button\" value = \"추가\" onClick = \"insert()\">\r\n");
      out.write("	\r\n");
      out.write("	<table>\n");
      out.write("		<tr>\r\n");
      out.write("			<th><input type = \"checkbox\" name = \"allcheck\" onClick = \"allDelete(this)\"></th>\r\n");
      out.write("			<!-- this : 내가 지금 클릭한, 이름이 allcheck인 체크박스 -->\n");
      out.write("			<th>번호</th>\n");
      out.write("			<th>제목</th>\r\n");
      out.write("			<th>저자</th>\r\n");
      out.write("			<th>출판사</th>\r\n");
      out.write("			<th>가격</th>\r\n");
      out.write("			<th>입고일</th>\r\n");
      out.write("			<th>배송비</th>\r\n");
      out.write("			<th>구입 가능 서점</th>\r\n");
      out.write("			<th>보유 수량</th>\r\n");
      out.write("			<th>수정</th>\r\n");
      out.write("			<th>삭제</th>\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("	");

		ArrayList<BookBean> lists = bdao.getAllBooks();
		
		for(BookBean bb : lists) {
	
      out.write("		<tr>\r\n");
      out.write("				<td><input type = \"checkbox\" name = \"rowcheck\" value = \"");
      out.print( bb.getNo() );
      out.write("\"></td>\r\n");
      out.write("				<td>");
      out.print( bb.getNo() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getTitle() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getAuthor() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getPublisher() );
      out.write("</td>\r\n");
      out.write("				<td align = \"right\">");
      out.print( bb.getPrice() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getDay() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getKind() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getBookstore() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print( bb.getCount() );
      out.write("</td>\r\n");
      out.write("				<td><a href = \"updateForm.jsp?no=");
      out.print( bb.getNo() );
      out.write("\">수정</a></td>\r\n");
      out.write("				<td><a href = \"deleteProc.jsp?no=");
      out.print( bb.getNo() );
      out.write("\">삭제</a></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("	");
	}
	
      out.write("	\r\n");
      out.write("	</table>\r\n");
      out.write("\r\n");
      out.write("</form>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
