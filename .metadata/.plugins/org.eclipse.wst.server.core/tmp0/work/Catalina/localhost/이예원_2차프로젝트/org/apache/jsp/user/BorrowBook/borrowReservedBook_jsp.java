/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-08 09:42:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user.BorrowBook;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import reserve.ReserveDao;
import book.BookDao;
import borrow.BorrowDao;

public final class borrowReservedBook_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("book.BookDao");
    _jspx_imports_classes.add("reserve.ReserveDao");
    _jspx_imports_classes.add("borrow.BorrowDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("borrowReservedBook.jsp<br>\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	int rmnum = Integer.parseInt(request.getParameter("rmnum"));
	int rbnum = Integer.parseInt(request.getParameter("rbnum"));
	String rbcode = request.getParameter("rbcode");
	int rank = Integer.parseInt(request.getParameter("rank"));
	
	System.out.println("<borrowReservedBook.jsp> rmnum : " + rmnum + ", rbcode : " + rbcode + ", rank : " + rank);

	String msg;
	String url;
	if(rank != 1) {
		msg = "아직 순서 돌아오지 않았음";
		url = "../ReserveBook/reserveList.jsp";
	} else {
		BorrowDao brdao = BorrowDao.getInstance();
		boolean flag = brdao.isThisBookBorrowed(rbcode);
		if(flag == true) {
			msg = "아직 반납되지 않았음";
			url = "../ReserveBook/reserveList.jsp";
		} else {
			int count = brdao.canIBorrow(rmnum);
			if(count>=5) {
				msg = "대출 최대 도서 초과";
				url = "borrowList.jsp";
			} else {
				boolean flag2 = brdao.canIBorrowThisBook(rmnum, rbcode);
				if(flag2 == true) {
					msg = "이미 대출중인 도서입니다";
					url = "borrowList.jsp";
				} else {
					int cnt = brdao.borrowThisBook(rmnum, rbnum, rbcode);
					if(cnt > 0) {
						msg = "대출 성공";
						url = "borrowList.jsp";
						
						BookDao bdao = BookDao.getInstance();
						int cnt2 = bdao.lendBook(rbcode);  
						if(cnt2 > 0) {
							System.out.println("대출 수 증가 성공");
						} else {
							System.out.println("대출 수 증가 실패");
						}
						
						ReserveDao rdao = ReserveDao.getInstance();
						int count2 = rdao.checkReserveCount(rbcode);  
						
						int cnt3 = bdao.countReservedBook(count, rbcode);    
						if(cnt3 > 0) {  
							System.out.println("예약 수 업데이트 성공");
						} else {
							System.out.println("예약 수 업데이트 실패");
						}
						
						int cnt4 = rdao.cancelReservation(rmnum, rbcode);
						if(cnt4 > 0) {
							System.out.println("예약 명단에서 제거 성공");
						} else {
							System.out.println("예약 명단에서 제거 실패");
						}
						
					} else {
						msg = "대출 실패";
						url = "borrowList.jsp";
					}
				}
			}
		}
	}  
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		alert(\"");
      out.print( msg );
      out.write("\");\r\n");
      out.write("		location.href = \"");
      out.print( url );
      out.write("\"\r\n");
      out.write("	</script> \r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
