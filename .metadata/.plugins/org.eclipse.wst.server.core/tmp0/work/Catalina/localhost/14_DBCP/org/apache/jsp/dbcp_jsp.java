/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-11 02:43:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.sql.*;
import javax.naming.*;
import java.sql.*;

public final class dbcp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.naming");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("dbcp.jsp<br>\r\n");
      out.write("<!-- \r\n");
      out.write("Database Connection Pool \r\n");
      out.write("context.xml과 3개의 jar 파일 필요\r\n");
      out.write("-->\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	String sql = null;
	
	Context initContext = new InitialContext(); //초기 설정정보 가져올 때 InitialContext 객체 만듦(Context가 부모 : 다형성)
	Context envContext = (Context)initContext.lookup("java:comp/env"); //이 폴더 안에 OracleDB라는 이름으로 connection pool 있음 //loopup 메서드 : java:comp/env 가서 jdbc/OracleDB 찾아와라
	DataSource ds = (DataSource)envContext.lookup("jdbc/OracleDB"); //context.xml의 설정정보를 가져와라
	conn = ds.getConnection(); //jdbc/OracleDB 정보로 접속해라
	System.out.println("conn:" + conn);
	
	request.setCharacterEncoding("UTF-8");
	String username = request.getParameter("username");
	String email = request.getParameter("email");
	
	if(username != null && email != null) {
		sql = "insert into tdbcp values (?,?)";
		ps = conn.prepareStatement(sql);
		ps.setString(1,username);
		ps.setString(2,email);
		ps.executeUpdate();
	}


      out.write("\r\n");
      out.write("	<h2>tdbcp</h2>\r\n");
      out.write("	<form name = \"myform\" method = \"post\" action = \"dbcp.jsp\">\r\n");
      out.write("		이름 : <input type = \"text\" name = \"username\"><br>\r\n");
      out.write("		이메일 : <input type = \"text\" name = \"email\"><br>\r\n");
      out.write("		<input type = \"submit\" value = \"등록\"><br>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<h2>목록보기</h2>\r\n");
      out.write("	\r\n");
      out.write("	");

		sql = "select username, email from tdbcp";
		ps = conn.prepareStatement(sql);
		rs = ps.executeQuery();
		int i = 1;
		while(rs.next()){
			out.println(i + " : " + rs.getString(1) + ", " + rs.getString(2)+"<br>");
			i++;
		}
		rs.close();
		ps.close();
		conn.close();
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("커넥션풀(connection pool)\r\n");
      out.write("커넥션 객체를 미리 만들어 풀 속에 저장해두고 있다가 필요할 때마다 커넥션을 풀에서 가져다쓰고 다시 풀에 반환하는 기법\r\n");
      out.write("커넥션 생성하는데 드는 연결 시간이 소비되지 않는다\r\n");
      out.write("속도가 향상되고 접속자가 증가해도 웹 어플리케이션이 쉽게 다운되지 않는다\r\n");
      out.write("커넥션을 계속해서 재사용하기 때문에 생성되는 커넥션 수가 일정하게 유지된다\r\n");
      out.write("많이 만들면 메모리 소모가 커지고 적게 만들면 대기 시간이 길어짐 \r\n");
      out.write("-->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
